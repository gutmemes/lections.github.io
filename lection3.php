<?php 

include('index.php');
    
?>

    <div class="lections">
    <h1>Формирование запросов средствами языка SQL</h1>
    <h3>Оператор SELECT</h3>
    <p>Оператор SELECT позволяет формировать запрос к базе данных. В результате выполнения этого оператора СУБД формирует результирующий набор (иногда также называемый набором данных). Если этот оператор был введен в интерактивном режиме взаимодействия с базой данных, то результат отображается в виде таблицы в текущем диалоговом окне. На рис. 3.1 приведен пример выполнения оператора SELECT , извлекающего данные всех столбцов из таблицы dept.</p>
    <img src="lect3img_1.gif" alt="">
    <p>Если оператор SELECT выполняется из приложения на другом языке программирования, то формируется результирующий набор, размещаемый в памяти приложения или сервера БД, а затем приложение извлекает данные из результирующего набора в свои переменные.

Оператор SELECT имеет в стандарте SQL92 следующее формальное описание:</p>
<p><pre><span class="keywords_red">SELECT [DISTINCT]
     { {function_agregate | expr [AS new_field_name] } .,:
     | specification.*
     | *
     [INTO list_variable]
     FROM {{ имя_таблицы [AS] [table_alias] [(field .,:)]} 
               | {subquery [AS] subquery_alas [(field .,:)]} 
               | union_table 
               | constructor_of_table_value 
               | {TABLE имя_таблицы [AS] alias [(field .,:)]} 
          } .,:
     [WHERE condition]
     [GROUP BY {{ имя_таблицы | alias }.field} .,: {COLLATE name}] 
      [HAVING condition]
     [{ UNION | INTERSECT | EXCEPT } [ALL]
       [CORRESPONDING [BY (field.,:)]]
       SELECT_operator | {TABLE имя_таблицы} | constructor_of_table_value      
       [ORDER BY] {{field_result [ASC|DESC]}.,:}
             |{{ integer [ASC|DESC]}.,:} ;</span></pre></p>
             <p>Для выполнения запроса требуется привилегия SELECT на все таблицы, участвующие в запросе.

После фразы SELECT указывается список выражений, определяющий значения, формируемые запросом. В самом простом случае список выражений является списком полей таблицы. Если требуется извлечение значений всех полей, то вместо списка полей можно указать символ *. Например:</p>
<span class="keywords_red">SELECT * FROM tbl1;</span>
<p>Имя поля может быть квалифицировано именем таблицы, указываемым через точку. Например:</p>
<span class="keywords_red">SELECT tbl1.f1, tbl2.f1 FROM tbl1, tbl2;</span>
<ul>
    
    <li>Фраза FROM определяет одну или несколько таблиц или подзапросов, используемых для извлечения данных.</li>
    <li>Фраза INTO используется только во встроенном SQL, указывая переменные, в которые записывается результат запроса. При этом формируемый результирующий набор может содержать только одну строку.</li>
    <li>Фраза WHERE определяет условие, которому должны удовлетворять все строки, используемые для формирования результирующего набора.</li>

</ul>
<p>Во всех операциях сравнения языка SQL применяется трехзначная логика ( 3VL ). Предикат, указываемый фразой WHERE, может принимать одно из следующих значений: TRUE, FALSE или UNKNOWN. Значение UNKNOWN получается при сравнении значения NULL с любым другим значением, включая значение NULL.

Предикат содержит одно или несколько выражений, выполняющих сравнения. В выражениях могут участвовать имена столбцов, функции агрегирования, переменные встроенного SQL, параметры модульного SQL.

Кроме стандартных операторов сравнения, таких как =, <>, >, <, >=, <= могут быть использованы следующие операторы:</p>
<img src="tablelect3.png" alt="">
    <div class="pages">
        <div class="page"><a href="lection3.php">1</a></div>
        <div class="page"><a href="lection3-2.php">2</a></div>
        <div class="page"><a href="lection3-3.php">3</a></div>
    </div>
    </div>
</body>
</html>